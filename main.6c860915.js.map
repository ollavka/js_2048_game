{"version":3,"sources":["scripts/main.js"],"names":["Game","gameField","scoreContainer","gameSize","winValue","cellsCount","cells","score","gameOver","refreshGameCells","tilesMoving","groupedCellsByRow","groupedCellsByColumn","groupedCellsByReversedRow","groupedCellsByReversedColumn","length","innerHTML","textContent","i","x","y","Math","floor","cell","Cell","push","createNewTile","groupCellsByColumn","groupCellsByRow","map","column","reverse","row","getRandomEmptyCell","linkTile","Tile","canCreateNewTail","canMoveTilesUp","moveGroupTiles","canMoveTilesDown","canMoveTilesLeft","canMoveTilesRight","groupedCells","forEach","group","moveTilesInGroup","Promise","all","then","hasTileForMerge","mergeTiles","increaseScore","bind","groupOfCells","isEmpty","j","cellWithTile","targetCell","canAccept","linkedTile","waitForMovingEnd","linkTileForMerge","unlinkTile","canMoveGroupTiles","some","canMoveTilesInGroup","idx","tile","tileValue","emptyCells","filter","random","reduce","linkedTileInner","document","createElement","classList","add","appendChild","setTilePosition","tileInner","linkedTileForMerge","newTile","setValue","remove","unlinkTileForMerge","tileContainer","querySelector","removeClassName","elem","targetClassName","classNames","modifierClass","find","className","includes","value","resolve","addEventListener","once","messageStart","messageLose","messageWin","gameBoard","gameScore","startButton","game","addKeyPressListener","handleKeyPress","e","cantMoveTiles","direction","key","ARROW_UP","moveTilesUp","ARROW_DOWN","moveTilesDown","ARROW_LEFT","moveTilesLeft","ARROW_RIGHT","moveTilesRight","setTimeout","gameIsOver","button","target","contains","startGame"],"mappings":"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","file":"main.6c860915.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n/* =========CLASSES=========== */\nclass Game {\n  constructor(gameField, scoreContainer, gameSize, winValue) {\n    this.gameField = gameField;\n    this.gameSize = gameSize;\n    this.cellsCount = gameSize ** 2;\n    this.cells = [];\n\n    this.scoreContainer = scoreContainer;\n    this.score = 0;\n    this.winValue = winValue;\n    this.gameOver = false;\n\n    this.refreshGameCells();\n\n    this.tilesMoving = [];\n\n    this.groupedCellsByRow = [];\n    this.groupedCellsByColumn = [];\n    this.groupedCellsByReversedRow = [];\n    this.groupedCellsByReversedColumn = [];\n  }\n\n  /* ================================ */\n  refreshGameCells() {\n    this.cells.length = 0;\n    this.gameField.innerHTML = '';\n    this.score = 0;\n    this.gameOver = false;\n    this.scoreContainer.textContent = this.score;\n\n    for (let i = 0; i < this.cellsCount; i++) {\n      const x = i % this.gameSize;\n      const y = Math.floor(i / this.gameSize);\n\n      const cell = new Cell(this.gameField, x, y);\n\n      this.cells.push(cell);\n    }\n  }\n\n  startGame() {\n    this.refreshGameCells();\n    this.createNewTile();\n\n    this.groupedCellsByColumn = this.groupCellsByColumn();\n    this.groupedCellsByRow = this.groupCellsByRow();\n\n    this.groupedCellsByReversedColumn = this.groupedCellsByColumn\n      .map(column => {\n        return [...column].reverse();\n      });\n\n    this.groupedCellsByReversedRow = this.groupedCellsByRow.map(row => {\n      return [...row].reverse();\n    });\n  }\n\n  createNewTile() {\n    this.getRandomEmptyCell().linkTile(new Tile(this.gameField));\n  }\n\n  gameIsOver() {\n    return this.gameOver;\n  }\n\n  /* ================================ */\n  moveTilesUp() {\n    const canCreateNewTail = this.canMoveTilesUp();\n\n    this.moveGroupTiles(this.groupedCellsByColumn, canCreateNewTail);\n  }\n\n  moveTilesDown() {\n    const canCreateNewTail = this.canMoveTilesDown();\n\n    this.moveGroupTiles(this.groupedCellsByReversedColumn, canCreateNewTail);\n  }\n\n  moveTilesLeft() {\n    const canCreateNewTail = this.canMoveTilesLeft();\n\n    this.moveGroupTiles(this.groupedCellsByRow, canCreateNewTail);\n  }\n\n  moveTilesRight() {\n    const canCreateNewTail = this.canMoveTilesRight();\n\n    this.moveGroupTiles(this.groupedCellsByReversedRow, canCreateNewTail);\n  }\n\n  moveGroupTiles(groupedCells, canCreateNewTail) {\n    groupedCells.forEach(group => {\n      this.moveTilesInGroup(group);\n    });\n\n    Promise.all(this.tilesMoving)\n      .then(() => {\n        this.cells.forEach(cell => {\n          cell.hasTileForMerge()\n            && cell.mergeTiles(this.increaseScore.bind(this));\n        });\n\n        if (canCreateNewTail) {\n          this.createNewTile();\n        }\n      });\n  }\n\n  moveTilesInGroup(groupOfCells) {\n    for (let i = 1; i < groupOfCells.length; i++) {\n      if (groupOfCells[i].isEmpty()) {\n        continue;\n      }\n\n      const cellWithTile = groupOfCells[i];\n\n      let targetCell;\n      let j = i - 1;\n\n      while (j >= 0 && groupOfCells[j].canAccept(cellWithTile.linkedTile)) {\n        targetCell = groupOfCells[j];\n        j--;\n      }\n\n      if (!targetCell) {\n        continue;\n      }\n\n      this.tilesMoving.push(cellWithTile.linkedTile.waitForMovingEnd());\n\n      if (targetCell.isEmpty()) {\n        targetCell.linkTile(cellWithTile.linkedTile);\n      } else {\n        targetCell.linkTileForMerge(cellWithTile.linkedTile);\n      }\n\n      cellWithTile.unlinkTile();\n    }\n  }\n\n  cantMoveTiles() {\n    return (\n      !this.canMoveTilesUp()\n      && !this.canMoveTilesDown()\n      && !this.canMoveTilesLeft()\n      && !this.canMoveTilesRight()\n    );\n  }\n\n  canMoveTilesUp() {\n    return this.canMoveGroupTiles(this.groupedCellsByColumn);\n  }\n\n  canMoveTilesDown() {\n    return this.canMoveGroupTiles(this.groupedCellsByReversedColumn);\n  }\n\n  canMoveTilesLeft() {\n    return this.canMoveGroupTiles(this.groupedCellsByRow);\n  }\n\n  canMoveTilesRight() {\n    return this.canMoveGroupTiles(this.groupedCellsByReversedRow);\n  }\n\n  canMoveGroupTiles(groupedCells) {\n    return groupedCells.some(group => {\n      return this.canMoveTilesInGroup(group);\n    });\n  }\n\n  canMoveTilesInGroup(groupOfCells) {\n    return groupOfCells.some((cell, idx) => {\n      if (idx === 0 || cell.isEmpty()) {\n        return false;\n      }\n\n      const targetCell = groupOfCells[idx - 1];\n\n      return targetCell.canAccept(cell.linkedTile);\n    });\n  }\n\n  /* ================================ */\n  increaseScore(tile) {\n    this.score += tile.tileValue;\n    this.scoreContainer.textContent = this.score;\n\n    if (tile.tileValue === this.winValue) {\n      this.gameOver = true;\n    }\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIdx = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIdx];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n\nclass Cell {\n  constructor(gameField, x, y) {\n    this.x = x;\n    this.y = y;\n    this.linkedTile = null;\n    this.linkedTileInner = null;\n\n    const cell = document.createElement('div');\n\n    cell.classList.add('game-cell');\n    gameField.appendChild(cell);\n  }\n\n  linkTile(tile) {\n    tile.setTilePosition(this.x, this.y);\n    this.linkedTile = tile;\n    this.linkedTileInner = tile.tileInner;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n    this.linkedTileInner = null;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setTilePosition(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty()\n      || (!this.hasTileForMerge()\n        && (+this.linkedTileInner.textContent) === newTile.tileValue\n      )\n    );\n  }\n\n  mergeTiles(increaseScore) {\n    this.linkedTile.setValue(\n      (+this.linkedTile.tileValue) + (+this.linkedTileForMerge.tileValue)\n    );\n\n    increaseScore(this.linkedTile);\n\n    this.linkedTileForMerge.tile.remove();\n    this.unlinkTileForMerge();\n  }\n}\n\nclass Tile {\n  constructor(gameField) {\n    let tileContainer = gameField.querySelector('.tile-container');\n\n    if (!tileContainer) {\n      tileContainer = document.createElement('div');\n      tileContainer.classList.add('tile-container');\n\n      gameField.appendChild(tileContainer);\n    }\n\n    this.tile = document.createElement('div');\n    this.tileInner = document.createElement('div');\n    this.tileInner.classList.add('tile-inner');\n\n    this.setValue(Math.random() < 0.9 ? 2 : 4);\n\n    this.tile.classList.add(\n      'tile',\n      'game-cell',\n    );\n\n    this.tile.appendChild(this.tileInner);\n    tileContainer.appendChild(this.tile);\n  }\n\n  setTilePosition(x, y) {\n    this.removeClassName(this.tile, '--position--');\n    this.tile.classList.add(`tile--position--${y}-${x}`);\n  }\n\n  removeClassName(elem, targetClassName) {\n    const classNames = [...elem.classList];\n    const modifierClass = classNames.find(className => {\n      return className.includes(targetClassName);\n    });\n\n    elem.classList.remove(modifierClass);\n  }\n\n  setValue(value) {\n    this.tileValue = value;\n    this.tileInner.textContent = this.tileValue;\n\n    this.removeClassName(this.tileInner, 'tile-inner--');\n\n    this.tileInner.classList.add(`tile-inner--${this.tileValue}`);\n  }\n\n  waitForMovingEnd() {\n    return new Promise(resolve => {\n      this.tile.addEventListener('transitionend', resolve, { once: true });\n    });\n  }\n}\n\n/* ==========START GAME=============== */\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nconst gameBoard = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button');\n\nconst game = new Game(gameBoard, gameScore, 4, 2048);\n\nstartButton.addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n  }\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  game.startGame();\n  addKeyPressListener();\n});\n\nfunction addKeyPressListener() {\n  document.addEventListener('keydown', handleKeyPress, { once: true });\n}\n\nfunction handleKeyPress(e) {\n  if (game.cantMoveTiles()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  const direction = e.key;\n\n  const ARROW_UP = 'ArrowUp';\n  const ARROW_DOWN = 'ArrowDown';\n  const ARROW_LEFT = 'ArrowLeft';\n  const ARROW_RIGHT = 'ArrowRight';\n\n  switch (direction) {\n    case ARROW_UP:\n      game.moveTilesUp();\n      break;\n\n    case ARROW_DOWN:\n      game.moveTilesDown();\n      break;\n\n    case ARROW_LEFT:\n      game.moveTilesLeft();\n      break;\n\n    case ARROW_RIGHT:\n      game.moveTilesRight();\n      break;\n\n    default:\n      break;\n  }\n\n  setTimeout(() => {\n    if (game.gameIsOver()) {\n      messageWin.classList.remove('hidden');\n    } else {\n      addKeyPressListener();\n    }\n  }, 300);\n}\n"]}